-- TABLE PROCESS
CREATE TABLE PROCESS (
    IDPROCESS SERIAL PRIMARY KEY,
    PROCESSNAME VARCHAR(100) NOT NULL,
    DEVELOPER VARCHAR(100),
    DESCRIPTION VARCHAR(500),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- TABLE ROBOTS
CREATE TABLE ROBOTS (
    IDROBOT SERIAL PRIMARY KEY,
    IDPROCESS INTEGER NOT NULL,
    ROBOTNAME VARCHAR(100) NOT NULL,
    ROBOTCODE VARCHAR(50) NOT NULL,
    VERSION VARCHAR(10),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ROBOTS_PROCESS FOREIGN KEY (IDPROCESS) 
        REFERENCES PROCESS(IDPROCESS)
);

-- TABLE EXECUTIONS
CREATE TABLE EXECUTIONS (
    IDEXECUTION SERIAL PRIMARY KEY,
    IDROBOT INTEGER NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    END_TIME TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_EXECUTIONS_ROBOTS FOREIGN KEY (IDROBOT) 
        REFERENCES ROBOTS(IDROBOT),
    CONSTRAINT CK_EXECUTIONS_STATUS CHECK (STATUS IN ('SUCCESS', 'FAILURE', 'RUNNING', 'PENDING'))
);

-- TABLE TRANSACTION
CREATE TABLE TRANSACTION (
    IDTRANSACTION SERIAL PRIMARY KEY,
    IDEXECUTION INTEGER NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    TRANSACTION_DATA TEXT,
    START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    END_TIME TIMESTAMP,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_TRANSACTION_EXECUTIONS FOREIGN KEY (IDEXECUTION) 
        REFERENCES EXECUTIONS(IDEXECUTION),
    CONSTRAINT CK_TRANSACTION_STATUS CHECK (STATUS IN ('SUCCESS', 'FAILURE', 'RUNNING', 'PENDING'))
);

-- TABLE LOG
CREATE TABLE LOG (
    IDLOG SERIAL PRIMARY KEY,
    IDEXECUTION INTEGER NOT NULL,
    IDTRANSACTION INTEGER,
    FUNCTION VARCHAR(100),
    FILE VARCHAR(255),
    LINENUMBER INTEGER,
    MESSAGE TEXT,
    PROCESSTYPE VARCHAR(20) NOT NULL,
    STATUS VARCHAR(20) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_LOG_EXECUTIONS FOREIGN KEY (IDEXECUTION) 
        REFERENCES EXECUTIONS(IDEXECUTION),
    CONSTRAINT FK_LOG_TRANSACTION FOREIGN KEY (IDTRANSACTION) 
        REFERENCES TRANSACTION(IDTRANSACTION),
    CONSTRAINT CK_LOG_PROCESSTYPE CHECK (PROCESSTYPE IN ('robotic', 'business', 'system', 'process')),
    CONSTRAINT CK_LOG_STATUS CHECK (STATUS IN ('failure', 'success', 'warning', 'critical', 'information'))
);

-- Índices para melhorar performance
CREATE INDEX IX_ROBOTS_IDPROCESS ON ROBOTS(IDPROCESS);
CREATE INDEX IX_EXECUTIONS_IDROBOT ON EXECUTIONS(IDROBOT);
CREATE INDEX IX_EXECUTIONS_STATUS ON EXECUTIONS(STATUS);
CREATE INDEX IX_TRANSACTION_IDEXECUTION ON TRANSACTION(IDEXECUTION);
CREATE INDEX IX_LOG_IDEXECUTION ON LOG(IDEXECUTION);
CREATE INDEX IX_LOG_IDTRANSACTION ON LOG(IDTRANSACTION);
CREATE INDEX IX_LOG_STATUS ON LOG(STATUS);
CREATE INDEX IX_LOG_PROCESSTYPE ON LOG(PROCESSTYPE);

-- Liberar Restrictionsa do Supabase 
-- Remover a restrição antiga
ALTER TABLE EXECUTIONS DROP CONSTRAINT IF EXISTS CK_EXECUTIONS_STATUS;

-- Adicionar a nova restrição com 'STARTING'
ALTER TABLE EXECUTIONS ADD CONSTRAINT CK_EXECUTIONS_STATUS 
    CHECK (STATUS IN ('SUCCESS', 'FAILURE', 'RUNNING', 'PENDING', 'STARTING'));

-- Fazer o mesmo para TRANSACTION se necessário
ALTER TABLE TRANSACTION DROP CONSTRAINT IF EXISTS CK_TRANSACTION_STATUS;
ALTER TABLE TRANSACTION ADD CONSTRAINT CK_TRANSACTION_STATUS 
    CHECK (STATUS IN ('SUCCESS', 'FAILURE', 'RUNNING', 'PENDING', 'STARTING'));